# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master
- features/*

pool:
  vmImage: 'windows-latest'

variables:
  # Global variables
  solutionName: 'BatteryStatus'
  buildConfiguration: 'Release'

  # r10_stage variables
  allProjects: '**/*.csproj'
  appProjects: '**/$(solutionName)/*.csproj'
  testProjects: '**/*tests/*.csproj'
  
  # r20_stage variables
  buildPlatform: 'x64'
  packageProject: '**/*.wapproj'
  version: '1.2.0.$(Build.BuildId)'
  distributionUrl: 'https://nerada.blob.core.windows.net/batterystatus'

stages:
- stage: rl0_stage
  displayName: 'Default stage'
  jobs:
  - job: QualityCheck
    displayName: 'Quality checks'
    timeoutInMinutes: 10
    steps:

    - task: DotNetCoreCLI@2
      displayName: 'DotNet - Restore'
      inputs:
        command: 'restore'
        projects: '$(allProjects)'
        includeNuGetOrg: true

    - task: PowerShell@2
      displayName: 'ReSharper code analysis'
      timeoutInMinutes: 5
      inputs:
        targetType: 'inline'
        script: 'iex (iwr https://raw.githubusercontent.com/Nerada/devops_resharper/master/ReSharperCodeAnalysisScript.ps1)'

    - task: DotNetCoreCLI@2
      displayName: 'DotNet - Build' 
      inputs:
        command: 'build'
        projects: '$(appProjects)'
        arguments: '--configuration $(buildConfiguration) --no-restore'
        
    - task: DotNetCoreCLI@2
      displayName: 'DotNet - Test' 
      inputs:
        command: test
        projects: '$(testProjects)'
        arguments: '--configuration $(buildConfiguration) --no-restore --collect "Code coverage"' 

    - task: DeleteFiles@1
      displayName: 'Clear staging directory'
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)'
        contents: |
          **/*

  - job: PublishPackage
    displayName: 'Publish package'
    timeoutInMinutes: 5
    steps:

    - task: DotNetCoreCLI@2
      displayName: 'DotNet - Restore'
      inputs:
        command: 'restore'
        projects: '$(allProjects)'
        includeNuGetOrg: true

    - task: PowerShell@2
      displayName: 'Version Package Manifest'
      inputs:
        targetType: 'inline'
        script: |
         # Update appxmanifest. This must be done before the build.
         $manifestFile = Get-ChildItem -Path ".\**" -Filter Package.appxmanifest -Recurse
         [xml]$manifest = get-content $manifestFile
         $manifest.Package.Identity.Version = "$(version)"    
         $manifest.save($manifestFile)

    - task: PowerShell@2
      displayName: 'Version App Installer File'
      inputs:
        targetType: 'inline'
        script: |
         # Update appinstaller. This should be done before the build (else installerFile will have the same content twice).
         $installerFile = Get-ChildItem -Path ".\**" -Filter $(solutionName).appinstaller -Recurse
         [xml]$appinstaller = get-content $installerFile
         $appinstaller.AppInstaller.Version = "$(version)" 
         $appinstaller.AppInstaller.MainPackage.Version = "$(version)"    
         $appinstaller.save("$(Build.ArtifactStagingDirectory)/$(solutionName).appinstaller")

    - task: DownloadSecureFile@1
      displayName: 'Download CA certificate'
      name: signingCert
      inputs:
        secureFile: 'RamBo.pfx'

    - task: MSBuild@1
      displayName: 'Package the App'
      inputs:
        solution: '$(packageProject)'
        platform: $(buildPlatform)
        configuration: $(buildConfiguration)
        msbuildArguments: '/p:platform=$(buildPlatform)
                           /p:Configuration=$(buildConfiguration)
                           /p:OutputPath=NonPackagedApp
                           /p:UapAppxPackageBuildMode=SideLoadOnly
                           /p:AppxBundle=Never 
                           /p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\$(solutionName).msix 
                           /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(solutionName)' #$(solutionName)_$(version)
        publishLocation: 'Container'
